version: '3.8'

services:
  zerabot:
    build: .
    container_name: zerabot
    restart: unless-stopped
    env_file: .env
    environment:
      - ENVIRONMENT=production
      - TZ=UTC
      - AUTOCERT_DIR=/app/certs  # Directory for Let's Encrypt certificates
      - LOG_LEVEL=info  # Set to 'debug' for more verbose logs if needed
      - GODEBUG=netdns=0  # Disable DNS resolver logs
      - GIN_MODE=release  # Disable Gin debug mode logs
    ports:
      - "80:80"       # HTTP for Let's Encrypt challenge
      - "443:443"     # HTTPS
      - "50051:50051" # gRPC server
    volumes:
      - ./certs:/app/certs:rw  # Explicit read-write access
      - data:/app/data
      # Using bind mount for certs with proper permissions
    # Ensure the container has root access to manage certs
    user: root
    networks:
      - zerabot-network
    # Ensure proper permissions for the certs directory
    # Run as root to ensure certificate access
    # user: "1000:1000"  # Temporarily disabled for certificate access
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}/{{.ID}}"
        labels: "production"

  # Uncomment and configure if you need a local PostgreSQL instance
  # db:
  #   image: postgres:15-alpine
  #   container_name: zerabot-db
  #   restart: always
  #   environment:
  #     POSTGRES_USER: ${DB_USER}
  #     POSTGRES_PASSWORD: ${DB_PASSWORD}
  #     POSTGRES_DB: ${DB_NAME}
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   networks:
  #     - zerabot-network
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

networks:
  zerabot-network:
    driver: bridge

volumes:
  # postgres_data:
  data:

